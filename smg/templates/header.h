#pragma once
/**
 * @file
 * Warning: This file was generated by smg
 **/

#include <stdint.h>
#include <stddef.h>

/**
 * {{smg.state_type}}: state machine type
 **/
typedef enum {
{% for state in smg.states %}
    {{state.enum}},
{% endfor %}
} {{smg.state_type}};


/**
 * Event type
 **/
typedef bool {{smg.event_type}};


/**
 * This type holds the state machine environment
 **/
typedef struct {
    {{smg.state_type}} state;
    {{smg.state_type}} prev_state;
    uint32_t iteration_count;
    uint32_t state_duration;
    struct _env {
    {% if smg.state_machine_env_members %}
        {{smg.state_machine_env_members}}
    {% endif %}
    } env;
} {{smg.state_machine_type}};


/**
 * Initialize a {{smg.state_machine_type}}
 *
 * @param machine initialize all members
 *
 **/
void {{smg.prefix}}_init({{smg.state_machine_type}}* m);


/**
 * Advance the state machine by one step,
 * updating the machine state.
 **/
void {{smg.prefix}}_next({{smg.state_machine_type}}* m);


{% if smg.include_string_funcs %}
/**
 * Get a string representation of the state type
 * @param state state to get name for
 * @retval const char*
 * @returns string representation of state
 **/
const char* {{smg.prefix}}_get_state_name(const {{smg.state_type}} state);
{% endif %}
